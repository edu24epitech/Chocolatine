on:
  push:
    branches-ignore:
      - 'ga-ignore-**'
  pull_request:
    branches-ignore:
      - 'ga-ignore-**'
env:
  MIRROR_URL: "git@github.com:EpitechPGEPromo2029/B-DOP-200-BAR-2-1-chocolatine-eduardo.window.git"
  EXECUTABLES: "mysh,directory1/executableA"
jobs:
  check_coding_style:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/epitech/coding-style-checker:latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run coding style check
        run: bash check.sh $(pwd) $(pwd)

      - name: Annotate coding style errors
        if: always()
        run: |
          if [ -f coding-style-reports.log ]; then
            while IFS= read -r line; do
              file=$(echo "$line" | cut -d':' -f1)
              line_number=$(echo "$line" | cut -d':' -f2)
              message=$(echo "$line" | cut -d':' -f3-)
              echo "::error file=$file,line=$line_number::$message"
            done < coding-style-reports.log
          else
            echo "No coding style report found."
          fi

      - name: Fail job if errors found
        run: |
          if [ -s coding-style-reports.log ]; then
            echo "Coding style errors found. Failing the job."
            exit 1
          fi

  check_program_compilation:
    runs-on: ubuntu-latest
    container:
      image: epitechcontent/epitest-docker
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run make with timeout
        run: |
          timeout 2m make
          if [ $? -ne 0 ]; then
            echo "::error::Compilation timed out or failed."
            exit 1
          fi

      - name: Run make clean
        run: make clean

      - name: Check executables
        run: |
          echo "$EXECUTABLES" | tr ',' '\n' | while read -r executable; do
            if [ ! -f "$executable" ]; then
              echo "::error file=$executable::Executable $executable is missing."
              exit 1
            fi
            if [ ! -x "$executable" ]; then
              echo "::error file=$executable::File $executable is not executable."
              exit 1
            fi
          done